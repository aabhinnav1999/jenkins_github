pipeline {
    // Specifies where the pipeline will run. 'any' means it can run on any available agent.
    agent {label 'my_server'}

    // Define environment variables that will be available throughout the pipeline
    environment {
        // Defines the Docker image name and tags it with the Jenkins build number
        DOCKER_IMAGE = "cicd-demo-app:${env.BUILD_NUMBER}"
        // Defines the name for the running Docker container
        CONTAINER_NAME = "cicd-demo-container"
    }

    // Define the stages of your CI/CD pipeline
    stages {
        stage('Checkout Code') {
            steps {
                echo "--- Checking out code from GitHub ---"
                // Clones the Git repository.
                // 'branch': Specifies the branch to clone (e.g., 'main' or 'master')
                // 'credentialsId': ID of the credentials configured in Jenkins for GitHub access
                // 'url': The URL of your GitHub repository
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/aabhinnav1999/jenkins_github']])
                echo "Code checked out successfully."
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "--- Building Docker image ---"
                script {
                    // Executes a shell command to build the Docker image
                    // '-t' tags the image with the defined DOCKER_IMAGE name
                    // '.' specifies the Dockerfile is in the current directory
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
                echo "Docker image ${DOCKER_IMAGE} built successfully."
            }
        }

//         stage('Login to Docker Hub') {
//             steps {
//                 echo "--- Logging in to Docker Hub ---"
//                 script {
//                     // Uses the 'withCredentials' binding to securely access Docker Hub credentials
//                     // 'dockerhub-credentials' must be a 'Username with password' type credential in Jenkins
//                     withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
//                         sh "echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin"
//                     }
//                 }
//                 echo "Logged in to Docker Hub."
//             }
//         }

//         stage('Tag and Push Docker Image to Docker Hub') {
//             steps {
//                 echo "--- Tagging the Docker image ---"
//                 script {
//                     sh "docker image tag ${DOCKER_IMAGE} dgruploads/${DOCKER_IMAGE}"
//                 }

//                 echo "--- Pushing Docker image to Docker Hub ---"
//                 script {
//                     // Pushes the built image to Docker Hub
//                     sh "docker image push dgruploads/${DOCKER_IMAGE}"
//                 }
//                 echo "Docker image ${DOCKER_IMAGE} pushed to Docker Hub."
//             }
//         }

//         stage('Stop and Remove Old Container (if exists)') {
//             steps {
//                 echo "--- Stopping and removing old container (if present) ---"
//                 script {
//                     // Stops and removes the existing container with the same name
//                     // '|| true' ensures the command doesn't fail the pipeline if the container doesn't exist
//                     sh "docker rm -f ${CONTAINER_NAME} || true"
//                 }
//                 echo "Old container removed."
//             }
//         }

//         stage('Run Docker Container') {
//             steps {
//                 echo "--- Running new Docker container ---"
//                 script {
//                     // Runs the new Docker container
//                     // '-d': runs in detached mode (in the background)
//                     // '-p 3000:3000': maps port 3000 from the container to port 3000 on the Jenkins agent host
//                     // '--name': assigns a specific name to the container
//                     sh "docker run -d -p 3000:3000 --name ${CONTAINER_NAME} ${DOCKER_IMAGE}"
//                 }
//                 echo "New container ${CONTAINER_NAME} running on port 3000."
//             }
//         }
//     }

//     // Post-build actions (optional, but good for cleanup or notifications)
//     post {
//         always {
//             echo "Pipeline finished. Build status: ${currentBuild.result}"
//             // Example cleanup: remove the Docker image after a successful build
//             // (You might want to keep images for a while in a real scenario)
//             // script {
//             //     sh "docker rmi ${DOCKER_IMAGE} || true"
//             // }
//         }
//         success {
//             echo "Pipeline executed successfully!"
//             // You could add a step here to send a success notification to Slack/email
//         }
//         failure {
//             echo "Pipeline failed!"
//             // You could add a step here to send a failure notification
//         }
    }
}